{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(rjson)\nlibrary(ggplot2)\nlibrary(twitteR)\nlibrary(sentiment)\nlibrary(plyr)\n\n#counter<-0\nfilenames1 <- list.files(pattern=\"hillary+.*json\") \nfilenames2 <- list.files(pattern=\"trump+.*json\")\n\n#print(filenames1)\n#print(filenames2)\n\nhillary_json<-fromJSON(file=filenames1[1])\nhillary<-data.frame(hillary_json)\n\ntrump_json<-fromJSON(file=filenames2[1])\ntrump<-data.frame(trump_json)\nprint(\"here i am\")\nfor (i in 2:7){\n  hillary_json<-fromJSON(file=filenames1[i])\n  temp<-data.frame(hillary_json)\n  hillary<-rbind(hillary, temp)\n}\nrm(temp)\nhillary<-hillary[c(\"text\")]\n#hillary<-hillary[1:100,]\n\nfor (i in 2:7){\n  trump_json<-fromJSON(file=filenames2[i])\n  temp<-data.frame(trump_json)\n  trump<-rbind(trump, temp)\n}\nView(trump)\n\ntrump<-trump[c(\"text\")]\nView(trump)\n\nsenti_analysis<-function(final){\n  print(\"entering analysis function\")\n  some_tweet<-as.vector(final[['text']])\n  some_txt =gsub(\"(RT|via)((?:\\\\b\\\\W*@\\\\w+)+)\", \"\", some_tweet)\n  some_txt = gsub(\"@\\\\w+\", \"\", some_txt)\n  some_txt = gsub(\"[[:punct:]]\", \"\", some_txt)\n  some_txt = gsub(\"[[:digit:]]\", \"\", some_txt) # remove numbers\n  some_txt = gsub(\"http\\\\w+\", \"\", some_txt) # remove html links\n  some_txt = gsub(\"[ \\t]{2,}\", \"\", some_txt) # remove unnecessary spaces\n  some_txt = gsub(\"^\\\\s+|\\\\s+$\", \"\", some_txt)\n  try.error = function(x)\n  {\n    y = NA # create missing value\n    # tryCatch error\n    try_error = tryCatch(tolower(x), error=function(e) e)\n    # if not an error\n    if (!inherits(try_error, \"error\"))\n      y = tolower(x)\n    return(y)\n  }\n  some_txt = sapply(some_txt, try.error) # lower case using try.error with sapply\n  some_txt = some_txt[!is.na(some_txt)] # remove NAs in some_txt\n  names(some_txt) = NULL\n  \n  # Perform Sentiment Analysis\n  class_emo = classify_emotion(some_txt, algorithm=\"bayes\", prior=1.0) # classify emotion\n  emotion = class_emo[,7] # get emotion best fit\n  emotion[is.na(emotion)] = \"unknown\" # substitute NA's by \"unknown\"\n  \n  # classify polarity\n  class_pol = classify_polarity(some_txt, algorithm=\"bayes\")\n  polarity = class_pol[,4] # get polarity best fit\n  # Create data frame with the results and obtain some general statistics\n  # data frame with results\n  sent_df = data.frame(text=some_txt, emotion=emotion,\n                       polarity=polarity, stringsAsFactors=FALSE)\n  sent_df = within(sent_df,\n                   emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))\n  print(\"analysis done once\")\n  return(sent_df)\n  \n  \n}\n\nstream<-function(aString){\n  print(\"entering streaming\")\n  load(\"my_oauth.Rdata\")\n  filterStream(file.name = \"random.json\", # Save tweets in a json file\n               track = c(aString),\n               language = \"en\",\n               timeout = 10, # Keep connection alive for 60 seconds\n               oauth = my_oauth) # Use my_oauth file as the OAuth credentials\n  \n  tweets.df <- parseTweets(\"random.json\", simplify = FALSE)\n  fn<-\"random.json\"\n  # if (file.exists(fn)) file.remove(fn)\n  someDF<-senti_analysis(tweets.df)\n  someDF$polarity<-as.factor(someDF$polarity)\n  return(someDF)\n}\n\nmultiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {\n  library(grid)\n  # Make a list from the ... arguments and plotlist\n  plots <- c(list(...), plotlist)\n  numPlots = length(plots)\n  # If layout is NULL, then use 'cols' to determine layout\n  if (is.null(layout)) {\n    # Make the panel\n     layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),\n                     ncol = cols, nrow = ceiling(numPlots/cols))\n  }\n  if (numPlots==1) {\n    print(plots[[1]])\n  } else {\n    # Set up the page\n    grid.newpage()\n    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))\n     # Make each plot, in the correct location\n    for (i in 1:numPlots) {\n     matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))\n      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,\n                                      layout.pos.col = matchidx$col))\n    }\n  }\n}\n\nshinyServer(function(input, output,session) {\n  print(\"entered into server\")\n  # hillary_senti<-senti_analysis(hillary)\n  counter<-0\n  trump_senti<-senti_analysis(trump)\n  trump_senti$polarity<-as.factor(trump_senti$polarity)\n  hillary_senti<-senti_analysis(hillary)\n  hillary_senti$polarity<-as.factor(hillary_senti$polarity)\n  \n  print(\"after calling analysis\")\n  #counter<-counter+1\n  autoInvalidate <- reactiveTimer(120000, session)\n   output$distPlot <- renderPlot({\n      print(\"rendering\")\n     \n     autoInvalidate()\n     print(counter)\n     \n       print(\"going for stream\")\n       trump_senti1<-stream(\"donald trump\")\n       hillary_senti1<-stream(\"hillary clinton\")\n       \n       trump_senti<-rbind(trump_senti,trump_senti1)\n       hillary_senti<-rbind(hillary_senti,hillary_senti1)\n       \n       print(nrow(trump_senti))\n     \n     \n     a<-ggplot(trump_senti, aes(x=polarity, fill=polarity))+geom_bar()+ggtitle(\"Donald Trump related tweets - Polarity\")\n     b<-ggplot(hillary_senti, aes(x=polarity, fill=polarity))+geom_bar()+ggtitle(\"Hillary Clinton related tweets - Polarity\")\n     c<-ggplot(trump_senti, aes(x=emotion, fill=polarity))+geom_bar()+ggtitle(\"Donald Trump related tweets - Emotions\")\n     d<-ggplot(hillary_senti, aes(x=emotion, fill=polarity))+geom_bar()+ggtitle(\"Hillary Clinton related tweets - Emotions\")\n     multiplot(a,b,c,d,cols=2)\n#      counter<-2\n#      print(counter)\n })\n   \n#    output$distPlot2 <- renderPlot({\n#      autoInvalidate()\n#      if(counter>1){\n#        hillary_senti<-stream(\"hillary clinton\")\n#      }\n#      ggplot(hillary_senti, aes(x=polarity, fill=polarity))+geom_bar()+ggtitle(\"Hillary Clinton related tweets - Polarity\")\n#    })\n#    \n#    output$distPlot3 <- renderPlot({\n#      autoInvalidate()\n#      ggplot(trump_senti, aes(x=emotion, fill=polarity))+geom_bar()+ggtitle(\"Donald Trump related tweets - Emotions\")\n#    })\n#    \n#    output$distPlot4 <- renderPlot({\n#      autoInvalidate()\n#      ggplot(hillary_senti, aes(x=emotion, fill=polarity))+geom_bar()+ggtitle(\"Hillary Clinton related tweets - Emotions\")\n#    })\n#    \n   \n\n})\n",
    "created" : 1457211235010.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2559549248",
    "id" : "749E8A07",
    "lastKnownWriteTime" : 1457235734,
    "path" : "~/election_analysis/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}